// Prisma Schema for Admin Dashboard & Analytics
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models - Enhanced for Production
model MetricDefinition {
  id                String   @id @default(uuid())
  key               String   @unique @db.VarChar(100)
  name              String   @db.VarChar(255)
  description       String?  @db.Text
  category          String   @db.VarChar(50)
  calculationQuery  String   @db.Text
  dataSource        String   @db.VarChar(100)
  refreshInterval   Int      @default(300)
  isActive          Boolean  @default(true)
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String   @db.VarChar(50)

  // Relations
  widgets    Widget[]
  alertRules AlertRule[]
  cacheEntries MetricCache[]

  @@index([key])
  @@index([category])
  @@index([isActive])
  @@index([createdBy])
  @@index([refreshInterval])
  @@map("metric_definitions")
}

model DashboardConfig {
  id          String   @id @default(uuid())
  userId      String   @db.VarChar(50)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  layout      Json
  isDefault   Boolean  @default(false)
  isShared    Boolean  @default(false)
  shareToken  String?  @unique @db.VarChar(100)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  widgets Widget[]

  @@index([userId])
  @@index([isDefault])
  @@index([shareToken])
  @@index([isShared])
  @@index([tags])
  @@map("dashboard_configs")
}

model Widget {
  id              String   @id @default(uuid())
  configId        String
  metricKey       String   @db.VarChar(100)
  type            WidgetType
  title           String   @db.VarChar(255)
  settings        Json
  position        Json
  refreshInterval Int?
  filters         Json?
  isVisible       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  config DashboardConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  metric MetricDefinition @relation(fields: [metricKey], references: [key])

  @@index([configId])
  @@index([metricKey])
  @@index([type])
  @@index([isVisible])
  @@map("widgets")
}

model SavedReport {
  id              String   @id @default(uuid())
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  queryDefinition Json
  format          ReportFormat
  schedule        String   @db.VarChar(100)
  recipients      String[]
  isActive        Boolean  @default(true)
  parameters      Json?
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  runCount        Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String   @db.VarChar(50)

  // Relations
  executions ReportExecution[]

  @@index([isActive])
  @@index([nextRunAt])
  @@index([createdBy])
  @@index([schedule])
  @@index([format])
  @@map("saved_reports")
}

model AlertRule {
  id             String        @id @default(uuid())
  name           String        @db.VarChar(255)
  metricKey      String        @db.VarChar(100)
  condition      AlertCondition
  threshold      Float
  comparison     String        @db.VarChar(50)
  frequency      String        @db.VarChar(100)
  channels       AlertChannel[]
  severity       AlertSeverity
  isActive       Boolean       @default(true)
  cooldownPeriod Int           @default(30)
  metadata       Json?
  lastTriggeredAt DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String        @db.VarChar(50)

  // Relations
  metric MetricDefinition @relation(fields: [metricKey], references: [key])
  logs   AlertLog[]

  @@index([metricKey])
  @@index([isActive])
  @@index([severity])
  @@index([lastTriggeredAt])
  @@index([createdBy])
  @@index([frequency])
  @@map("alert_rules")
}

// Supporting Models - Enhanced
model MetricCache {
  id          String   @id @default(uuid())
  metricKey   String   @db.VarChar(100)
  filters     Json?
  value       Float
  metadata    Json?
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  metric MetricDefinition @relation(fields: [metricKey], references: [key])

  @@unique([metricKey, filters])
  @@index([metricKey])
  @@index([expiresAt])
  @@map("metric_cache")
}

model ReportExecution {
  id         String        @id @default(uuid())
  reportId   String
  status     ExecutionStatus
  startedAt  DateTime      @default(now())
  completedAt DateTime?
  duration   Int?
  fileUrl    String?       @db.VarChar(500)
  error      String?       @db.Text
  parameters Json?
  fileSize   Int?
  recordCount Int?

  // Relations
  report SavedReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
  @@map("report_executions")
}

model AlertLog {
  id           String        @id @default(uuid())
  ruleId       String
  metricValue  Float
  threshold    Float
  condition    String        @db.VarChar(50)
  severity     AlertSeverity
  triggeredAt  DateTime      @default(now())
  payload      Json
  status       AlertStatus   @default(TRIGGERED)
  resolvedAt   DateTime?
  acknowledgedAt DateTime?
  acknowledgedBy String?     @db.VarChar(50)
  createdAt    DateTime      @default(now())

  // Relations
  rule AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([severity])
  @@index([triggeredAt])
  @@index([status])
  @@index([resolvedAt])
  @@map("alert_logs")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(50)
  action    String   @db.VarChar(100)
  resource  String   @db.VarChar(100)
  resourceId String? @db.VarChar(50)
  details   Json?
  ipAddress String   @db.VarChar(45)
  userAgent String?  @db.Text
  sessionId String?  @db.VarChar(100)
  success   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([success])
  @@index([sessionId])
  @@map("audit_logs")
}

model UserPreferences {
  id           String   @id @default(uuid())
  userId       String   @unique @db.VarChar(50)
  theme        String   @default("light") @db.VarChar(20)
  timezone     String   @default("UTC") @db.VarChar(50)
  dateFormat   String   @default("MM/dd/yyyy") @db.VarChar(20)
  numberFormat String   @default("en-US") @db.VarChar(10)
  language     String   @default("en") @db.VarChar(10)
  notifications Json?
  dashboardSettings Json?
  preferences  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([theme])
  @@index([language])
  @@map("user_preferences")
}

// New Models for Enhanced Features
model DashboardTemplate {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  category    String   @db.VarChar(100)
  layout      Json
  widgets     Json
  isPublic    Boolean  @default(false)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.VarChar(50)

  @@index([category])
  @@index([isPublic])
  @@index([usageCount])
  @@map("dashboard_templates")
}

model DataSource {
  id            String   @id @default(uuid())
  name          String   @db.VarChar(255)
  type          String   @db.VarChar(50)
  connectionString String @db.Text
  isActive      Boolean  @default(true)
  lastTestAt    DateTime?
  testStatus    String?  @db.VarChar(50)
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([type])
  @@index([isActive])
  @@map("data_sources")
}

model ScheduledJob {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  type        String   @db.VarChar(50)
  schedule    String   @db.VarChar(100)
  payload     Json
  isActive    Boolean  @default(true)
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  runCount    Int      @default(0)
  failCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("scheduled_jobs")
}

// Pricing & Billing Models
model Region {
  id                String            @id @default(uuid())
  name              String            @unique @db.VarChar(100)
  code              String            @unique @db.VarChar(10) // e.g., "NA", "SSA", "EU", "MENA", "APAC", "LATAM", "OCE"
  currency          String            @db.VarChar(10) // Base currency for the region
  timezone          String            @db.VarChar(50) // Default timezone
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  countries         Country[]
  subscriptionPlans SubscriptionPlan[]
  feeDefinitions    FeeDefinition[]
  discountRules     DiscountRule[]

  @@index([isActive])
  @@map("regions")
}

model Country {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  code      String   @unique @db.VarChar(2) // ISO 3166-1 alpha-2 code
  regionId  String
  region    Region   @relation(fields: [regionId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([regionId])
  @@index([code])
  @@index([isActive])
  @@map("countries")
}

model SubscriptionPlan {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(255) // "FREE", "PREMIUM", or "BUSINESS"
  accountType       AccountType       // PERSONAL or BUSINESS
  description       String?           @db.Text
  price             Decimal           @db.Decimal(18, 4)
  currency          String            @db.VarChar(10)
  billingCycle      BillingCycle
  features          String[]          // List of features included
  maxTransactions   Int?              // Monthly transaction limit
  maxCards          Int?              // Virtual card limit
  maxSavingsGoals   Int?              // Savings goals limit
  virtualCardIssuanceFee Decimal?    @db.Decimal(18, 4) // Fee for issuing a virtual card
  virtualCardMaintenanceFee Decimal? @db.Decimal(18, 4) // Monthly maintenance fee per card
  regionId          String?
  region            Region?           @relation(fields: [regionId], references: [id])
  isActive          Boolean           @default(true)
  sortOrder         Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([regionId])
  @@index([accountType])
  @@index([isActive])
  @@index([billingCycle])
  @@map("subscription_plans")
}

model FeeDefinition {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(255)
  description       String?           @db.Text
  feeType           FeeType
  feeSubType        FeeSubType?
  feeMethod         FeeMethod?
  valueType         FeeValueType
  value             Decimal           @db.Decimal(18, 4) // Percentage (e.g., 0.01 for 1%) or Flat amount
  cap               Decimal?          @db.Decimal(18, 4) // Maximum fee amount
  minFee            Decimal?          @db.Decimal(18, 4) // Minimum fee amount
  currency          String            @db.VarChar(10)
  regionId          String?
  region            Region?           @relation(fields: [regionId], references: [id])
  countryCodes      String[]          // ISO 3166-1 alpha-2 country codes this fee applies to
  isActive          Boolean           @default(true)
  effectiveFrom     DateTime          @default(now())
  effectiveTo       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([feeType])
  @@index([feeSubType])
  @@index([feeMethod])
  @@index([regionId])
  @@index([isActive])
  @@index([effectiveFrom])
  @@index([countryCodes])
  @@map("fee_definitions")
}

model DiscountRule {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(255)
  description       String?           @db.Text
  discountType      DiscountType
  value             Decimal           @db.Decimal(18, 4) // Percentage (e.g., 0.10 for 10%) or Flat amount
  maxDiscount       Decimal?          @db.Decimal(18, 4) // Maximum discount amount
  appliesToFeeType  FeeType?          // Optional: apply to specific fee type
  appliesToSubType  FeeSubType?       // Optional: apply to specific fee sub-type
  appliesToMethod   FeeMethod?        // Optional: apply to specific fee method
  appliesToAccountType AccountType?   // Optional: apply to specific account type
  appliesToCountries String[]         // ISO 3166-1 alpha-2 country codes
  regionId          String?
  region            Region?           @relation(fields: [regionId], references: [id])
  minTransactionAmount Decimal?       @db.Decimal(18, 4) // Minimum transaction amount for discount
  maxTransactionAmount Decimal?       @db.Decimal(18, 4) // Maximum transaction amount for discount
  usageLimit        Int?              // Maximum number of times this discount can be used
  usageCount        Int               @default(0) // Current usage count
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([appliesToFeeType])
  @@index([appliesToAccountType])
  @@index([appliesToCountries])
  @@index([regionId])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
  @@map("discount_rules")
}

model FeeCalculationLog {
  id                String            @id @default(uuid())
  userId            String            @db.VarChar(50)
  transactionId     String?           @db.VarChar(50)
  feeType           FeeType
  feeSubType        FeeSubType?
  feeMethod         FeeMethod?
  baseAmount        Decimal           @db.Decimal(18, 4)
  feeAmount         Decimal           @db.Decimal(18, 4)
  discountAmount    Decimal           @db.Decimal(18, 4) @default(0)
  finalFeeAmount    Decimal           @db.Decimal(18, 4)
  currency          String            @db.VarChar(10)
  regionId          String?
  countryCode       String?           @db.VarChar(2)
  appliedFeeRules   Json              // Array of fee definition IDs that were applied
  appliedDiscounts  Json              // Array of discount rule IDs that were applied
  calculationDetails Json             // Detailed breakdown of the calculation
  createdAt         DateTime          @default(now())

  @@index([userId])
  @@index([feeType])
  @@index([transactionId])
  @@index([countryCode])
  @@index([createdAt])
  @@map("fee_calculation_logs")
}

// Transaction Module Models
enum TransactionType {
  DEPOSIT
  TRANSFER
  WITHDRAWAL
  CARD_SERVICE
  SAVINGS
  SUBSCRIPTION
}

enum DepositMethod {
  MOMO_MTN
  MOMO_ORANGE
  INTERAC
  BANK
  PAYPAL
  CARD
  ADMIN_INITIATED
}

enum CardScheme {
  VISA
  MASTERCARD
  AMEX
  VERVE
}

enum CardType {
  DEBIT
  CREDIT
  PREPAID
  VIRTUAL
}

enum VirtualCardStatus {
  ACTIVE
  TERMINATED
  BLOCKED
  PENDING
}

enum TransferMethod {
  BANK_TRANSFER
  INTERAC
  MOBILE_MONEY_TRANSFER
  WIREMI_INTERNAL
}

enum WithdrawalMethod {
  MOMO_WITHDRAWAL
  BANK
  INTERAC
  ATM
}

enum CardServiceMethod {
  CARD_ISSUANCE
  CARD_FUNDING
  CARD_MAINTENANCE
}

enum SavingsMethod {
  CREATE
  AUTO_SAVE
  TERMINATION
  EMERGENCY_FUNDS_DEPOSIT
  EMERGENCY_FUNDS_WITHDRAWAL
  COMPLETION
  UPDATE
  INSTANCE_TIMEOUT
  SAVINGS_CREDIT
  SAVINGS_DEBIT
  INTEREST_CREDIT
}

enum SubscriptionMethod {
  PREMIUM_SUBSCRIPTION
  BUSINESS_SUBSCRIPTION
}

enum SavingsType {
  REGULAR
  BLOCKED
  RECURRENT
  GROUP
}

enum SavingsFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

enum TransactionStatus {
  PROCESSING
  SUCCESS
  FAILED
  PENDING_APPROVAL
  REVERSED
  CANCELLED
}

enum FlagSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ExportJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model VirtualCard {
  id                String            @id @default(uuid())
  userId            String            @db.VarChar(50)
  cardNumber        String            @unique @db.VarChar(16)
  cardBrand         CardScheme
  cardType          CardType
  expiryDate        String            @db.VarChar(5)
  cvv               String            @db.VarChar(3)
  status            VirtualCardStatus
  issueDate         DateTime          @default(now())
  terminationDate   DateTime?
  spendLimit        Decimal           @db.Decimal(18, 4) @default(0)
  transactionVolume Decimal           @db.Decimal(18, 4) @default(0)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  transactions      CardTransaction[]

  @@index([userId])
  @@index([status])
  @@map("virtual_cards")
}

model CardTransaction {
  id            String            @id @default(uuid())
  virtualCardId String
  virtualCard   VirtualCard       @relation(fields: [virtualCardId], references: [id], onDelete: Cascade)
  transactionId String            @unique @db.VarChar(50)
  description   String            @db.VarChar(255)
  amount        Decimal           @db.Decimal(18, 4)
  currency      String            @db.VarChar(10)
  timestamp     DateTime          @default(now())
  status        TransactionStatus

  @@index([virtualCardId])
  @@index([transactionId])
  @@map("card_transactions")
}

model SavingsInstance {
  id             String           @id @default(uuid())
  customerId     String           @db.VarChar(50)
  name           String           @db.VarChar(255)
  type           SavingsType
  targetAmount   Decimal          @db.Decimal(18, 4)
  currentAmount  Decimal          @db.Decimal(18, 4)
  expectedAmount Decimal          @db.Decimal(18, 4)
  frequency      SavingsFrequency
  startDate      DateTime         @default(now())
  endDate        DateTime?
  interestEarned Decimal          @db.Decimal(18, 4) @default(0)
  status         GoalStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([customerId])
  @@index([type])
  @@index([status])
  @@map("savings_instances")
}
model Transaction {
  id               String            @id @default(uuid())
  userId           String            @db.VarChar(50)
  type             TransactionType
  method           String            @db.VarChar(100)
  amount           Decimal           @db.Decimal(18, 4)
  currency         String            @db.VarChar(10)
  fees             Decimal           @db.Decimal(18, 4) @default(0)
  exchangeRate     Decimal?          @db.Decimal(18, 8)
  referenceId      String?           @unique @db.VarChar(255)
  metadata         Json?
  timeline         Json?
  walletBefore     Json?
  walletAfter      Json?
  status           TransactionStatus
  adminInitiatedBy String?           @db.VarChar(50)
  approvedBy       String?           @db.VarChar(50)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  flags            TransactionFlag[]
  notes            TransactionNote[]

  @@index([userId])
  @@index([type])
  @@index([method])
  @@index([status])
  @@index([createdAt])
  @@index([amount])
  @@index([adminInitiatedBy])
  @@index([approvedBy])
  @@map("transactions")
}

model TransactionFlag {
  id            String        @id @default(uuid())
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  reason        String        @db.Text
  severity      FlagSeverity
  flaggedBy     String        @db.VarChar(50)
  resolved      Boolean       @default(false)
  resolvedBy    String?       @db.VarChar(50)
  resolvedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([transactionId])
  @@index([severity])
  @@index([resolved])
  @@index([flaggedBy])
  @@map("transaction_flags")
}

model TransactionNote {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  content       String      @db.Text
  createdBy     String      @db.VarChar(50)
  createdAt     DateTime    @default(now())

  @@index([transactionId])
  @@index([createdBy])
  @@map("transaction_notes")
}

model ExportJob {
  id          String          @id @default(uuid())
  type        String          @db.VarChar(50)
  filters     Json?
  status      ExportJobStatus
  filePath    String?         @db.VarChar(500)
  requestedBy String          @db.VarChar(50)
  completedAt DateTime?
  error       String?         @db.Text
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([requestedBy])
  @@index([status])
  @@index([createdAt])
  @@map("export_jobs")
}

// Enums
enum WidgetType {
  KPI
  LINE_CHART
  BAR_CHART
  PIE_CHART
  TABLE
  GAUGE
  HEATMAP
  FUNNEL
  SCATTER
  AREA_CHART
  DONUT_CHART
  WATERFALL
}

enum ReportFormat {
  PDF
  XLSX
  CSV
  JSON
  HTML
  PNG
}

enum AlertCondition {
  GT
  LT
  EQ
  NE
  GTE
  LTE
  CHANGE_PERCENT
  CHANGE_ABSOLUTE
  ANOMALY
  TREND_UP
  TREND_DOWN
}

enum AlertChannel {
  EMAIL
  SLACK
  WEBHOOK
  IN_APP
  SMS
  TEAMS
  DISCORD
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  TRIGGERED
  ACKNOWLEDGED
  RESOLVED
  SUPPRESSED
  ESCALATED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
  RETRY
}
// Pricing & Billing Enums
enum FeeType {
  // Deposit Types
  CARD_DEPOSIT
  MOMO_DEPOSIT_ORANGE
  MOMO_DEPOSIT_MTN
  BANK_DEPOSIT
  INTERAC_DEPOSIT
  PAYPAL_DEPOSIT
  GOOGLE_PAY_DEPOSIT
  OPAY_DEPOSIT

  // Transfer Types
  MOMO_TRANSFER
  WIREMI_TRANSFER
  BANK_WIRE
  BANK_TRANSFER
  INTERAC_TRANSFER

  // Withdrawal Types
  VIRTUAL_CARDS_WITHDRAWALS

  // Crypto Types
  ON_RAMP
  OFF_RAMP

  // Loan Types
  LOAN_REFINANCE
  LOAN_PROCESSING
  LOAN_DEFAULT

  // Investment & Other Types
  CAPITAL
  DONATION
  INVESTMENT

  // Subscription
  SUBSCRIPTION
}

enum FeeSubType {
  // Transaction Fees
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT

  // Card Service Fees
  ISSUANCE
  FUNDING
  MAINTENANCE
  CARD_WITHDRAWAL

  // Savings Fees
  SAVINGS_DEBIT
  SAVINGS_WITHDRAWAL
  SAVINGS_TERMINATION
  SAVINGS_LATE
  GROUP_SAVINGS_JOINING

  // Investment & Donation Fees
  INVESTMENT_APPLICATION
  INVESTMENT_MANAGEMENT
  DONATION_PROCESSING

  // Fundraiser Fees
  FUNDRAISER_APPLICATION

  // Loan Fees
  LOAN_PROCESSING
  LOAN_INTEREST

  // Crypto Fees
  CRYPTO_ON_RAMP
  CRYPTO_OFF_RAMP
}

enum FeeMethod {
  // Transaction Methods
  MOMO_DEPOSIT
  INTERAC_DEPOSIT
  BANK_DEPOSIT
  CARD_DEPOSIT
  PAYPAL_DEPOSIT
  MOMO_WITHDRAWAL
  BANK_WITHDRAWAL
  ATM_WITHDRAWAL
  INTERAC_TRANSFER
  WIREMI_INTERNAL_TRANSFER
  BANK_TRANSFER
  MOBILE_MONEY_TRANSFER

  // Card Service Methods
  VIRTUAL_CARD
  PHYSICAL_CARD
  VISA_CARD
  MASTERCARD
  AMEX_CARD
  VERVE_CARD

  // Savings Methods
  REGULAR_SAVINGS
  BLOCKED_SAVINGS
  RECURRENT_SAVINGS
  GROUP_SAVINGS

  // Investment Methods
  STOCK_INVESTMENT
  BOND_INVESTMENT
  MUTUAL_FUND
  ETF_INVESTMENT

  // Crypto Methods
  BITCOIN
  ETHEREUM
  USDT
  USDC
  LITECOIN

  // Loan Methods
  PERSONAL_LOAN
  BUSINESS_LOAN
  MORTGAGE_LOAN
}

// Compliance & AML Enums
enum ComplianceCaseType {
  AML_SUSPICIOUS_ACTIVITY
  KYC_NON_COMPLIANCE
  SANCTIONS_SCREENING
  PEP_MATCH
  FRAUD_RELATED
  TRANSACTION_MONITORING
  CUSTOMER_DUE_DILIGENCE
  ENHANCED_DUE_DILIGENCE
  OTHER
}

enum ComplianceCaseStatus {
  OPEN
  IN_REVIEW
  PENDING_APPROVAL
  RESOLVED
  CLOSED
  ESCALATED
  SUSPENDED
}

enum ComplianceActionType {
  CASE_CREATED
  CASE_ASSIGNED
  STATUS_CHANGED
  NOTE_ADDED
  DOCUMENT_REQUESTED
  DOCUMENT_RECEIVED
  ACCOUNT_FROZEN
  ACCOUNT_UNFROZEN
  TRANSACTION_BLOCKED
  TRANSACTION_RELEASED
  KYC_APPROVED
  KYC_REJECTED
  ESCALATED_TO_SUPERVISOR
  CASE_CLOSED
}

enum KYCReviewStatus {
  PENDING_REVIEW
  IN_REVIEW
  APPROVED
  REJECTED
  REQUIRES_MORE_INFO
  ESCALATED
}

enum FeeValueType {
  PERCENTAGE
  FLAT
}

enum DiscountType {
  PERCENTAGE_OFF
  FLAT_OFF
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum AccountType {
  PERSONAL
  BUSINESS
}

// FX Configuration Models
model ExchangeRate {
  id            String   @id @default(uuid())
  fromCurrency  String   @db.VarChar(3)
  toCurrency    String   @db.VarChar(3)
  rate          Decimal  @db.Decimal(18, 8)
  lastUpdated   DateTime @default(now())
  source        String   @db.VarChar(50) // e.g., "manual", "api", "bank"
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([fromCurrency, toCurrency])
  @@index([fromCurrency])
  @@index([toCurrency])
  @@index([lastUpdated])
  @@map("exchange_rates")
}

model CurrencyPairConfiguration {
  id              String   @id @default(uuid())
  baseCurrency    String   @db.VarChar(3)
  targetCurrency  String   @db.VarChar(3)
  isActive        Boolean  @default(true)
  refreshInterval Int      @default(3600) // seconds
  autoUpdate      Boolean  @default(false)
  tolerance       Decimal? @db.Decimal(5, 4) // Alert if rate changes by this percentage
  markup          Decimal? @db.Decimal(5, 4) // Admin markup percentage
  spread          Decimal? @db.Decimal(5, 4) // Spread percentage
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([baseCurrency, targetCurrency])
  @@index([baseCurrency])
  @@index([targetCurrency])
  @@index([isActive])
  @@map("currency_pair_configurations")
}

// Compliance & AML Models
model ComplianceCase {
  id              String                @id @default(uuid())
  caseNumber      String                @unique @db.VarChar(50) // Auto-generated case number
  customerId      String                @db.VarChar(50)
  type            ComplianceCaseType
  status          ComplianceCaseStatus  @default(OPEN)
  priority        Priority              @default(MEDIUM)
  subject         String                @db.VarChar(500)
  description     String                @db.Text
  assignedTo      String?               @db.VarChar(50)
  relatedEntities Json?                 // Related transactions, accounts, etc.
  riskScore       Int?                  // Risk assessment score
  resolution      String?               @db.Text
  dueDate         DateTime?
  closedAt        DateTime?
  closedBy        String?               @db.VarChar(50)
  escalatedAt     DateTime?
  escalatedBy     String?               @db.VarChar(50)
  metadata        Json?                 // Additional case-specific data
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  createdBy       String                @db.VarChar(50)

  // Relations
  notes           ComplianceCaseNote[]
  actions         ComplianceCaseAction[]

  @@index([customerId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([createdAt])
  @@index([dueDate])
  @@index([caseNumber])
  @@map("compliance_cases")
}

model ComplianceCaseNote {
  id        String        @id @default(uuid())
  caseId    String
  content   String        @db.Text
  isInternal Boolean      @default(true) // Internal notes vs customer-facing
  createdAt DateTime      @default(now())
  createdBy String        @db.VarChar(50)

  // Relations
  case      ComplianceCase @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([createdBy])
  @@index([createdAt])
  @@map("compliance_case_notes")
}

model ComplianceCaseAction {
  id          String              @id @default(uuid())
  caseId      String
  actionType  ComplianceActionType
  description String              @db.Text
  performedBy String              @db.VarChar(50)
  metadata    Json?               // Action-specific data
  createdAt   DateTime            @default(now())

  // Relations
  case        ComplianceCase      @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([actionType])
  @@index([performedBy])
  @@index([createdAt])
  @@map("compliance_case_actions")
}

model KYCReview {
  id              String            @id @default(uuid())
  customerId      String            @db.VarChar(50)
  customerType    String            @db.VarChar(20) // PERSONAL or BUSINESS
  kycStatus       KYCReviewStatus   @default(PENDING_REVIEW)
  submissionDate  DateTime
  reviewDate      DateTime?
  reviewedBy      String?           @db.VarChar(50)
  priority        Priority          @default(MEDIUM)
  notes           String?           @db.Text
  rejectionReason String?           @db.Text
  documentsUrl    Json?             // URLs to KYC documents
  riskFlags       String[]          // Risk indicators
  complianceScore Int?              // Compliance assessment score
  dueDate         DateTime?
  escalatedAt     DateTime?
  escalatedBy     String?           @db.VarChar(50)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([customerId])
  @@index([kycStatus])
  @@index([priority])
  @@index([reviewedBy])
  @@index([submissionDate])
  @@index([dueDate])
  @@map("kyc_reviews")
}

model ComplianceAlert {
  id          String        @id @default(uuid())
  alertType   String        @db.VarChar(100) // Type of compliance alert
  severity    AlertSeverity
  customerId  String?       @db.VarChar(50)
  transactionId String?     @db.VarChar(50)
  subject     String        @db.VarChar(500)
  description String        @db.Text
  status      AlertStatus   @default(TRIGGERED)
  assignedTo  String?       @db.VarChar(50)
  resolvedAt  DateTime?
  resolvedBy  String?       @db.VarChar(50)
  metadata    Json?         // Alert-specific data
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([alertType])
  @@index([severity])
  @@index([customerId])
  @@index([transactionId])
  @@index([status])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("compliance_alerts")
}

model SanctionsScreening {
  id            String   @id @default(uuid())
  customerId    String   @db.VarChar(50)
  screeningType String   @db.VarChar(50) // OFAC, EU, UN, etc.
  matchFound    Boolean  @default(false)
  matchDetails  Json?    // Details of any matches found
  screenedAt    DateTime @default(now())
  screenedBy    String   @db.VarChar(50)
  
  @@index([customerId])
  @@index([screeningType])
  @@index([matchFound])
  @@index([screenedAt])
  @@map("sanctions_screening")
}